{"version":3,"sources":["myComponents/AddButton.jsx","myComponents/todoItems.jsx","App.js","serviceWorker.js","index.js"],"names":["AddButton","props","state","value","todoText","handleChange","bind","addTodo","e","this","setState","target","todo","length","className","onClick","type","placeholder","onChange","React","Component","TodoItems","isCheckeds","isChecked","id","removeTodo","text","App","inputLinked","todos","nextId","handleClick","slice","push","filter","index","date","Date","getDate","realMonth","getMonth","year","getFullYear","day","month","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6727fec8.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./AddButton.css\";\r\n\r\nexport default class AddButton extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {value: this.props.todoText};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addTodo = this.addTodo.bind(this);\r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({value: e.target.value});\r\n    }\r\n\r\n    addTodo(todo){\r\n        if(todo.length > 0){\r\n            this.props.addTodo(todo);\r\n            this.setState({value: ''});\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div className=\"addButton\" onClick={() => this.addTodo(this.state.value)}>+</div>\r\n            <div className=\"addTextBox\">\r\n                <input type=\"text\" placeholder=\"Add Your Task\" value={this.state.value} onChange={this.handleChange}/>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport \"./todoItems.css\";\r\n\r\nexport default class TodoItems extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            isCheckeds: false\r\n        }\r\n\r\n        this.isChecked = this.isChecked.bind(this);\r\n    }\r\n\r\n    \r\n\r\n    isChecked() {\r\n        this.setState({\r\n            isCheckeds: !this.state.isCheckeds\r\n        })\r\n      }\r\n\r\n    removeTodo(id){\r\n        this.props.removeTodo(id);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"row\">\r\n                <input type=\"checkbox\" onClick={this.isChecked}/>\r\n                <p className={this.state.isCheckeds? \"isChecked\": \"\"}>{this.props.todo.text}</p>\r\n                <button className=\"removeTodo\" onClick={(e) => this.removeTodo(this.props.id)}><b>X</b></button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\nimport AddButton from \"./myComponents/AddButton.jsx\";\nimport './App.css';\nimport TodoItems from './myComponents/todoItems.jsx';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n\n    this.state = {\n      inputLinked: false\n    }\n\n    this.state = {\n      todos: [\n        {id: 0, text: \"Make dinner tonight!\"},\n        {id: 1, text: \"Fold the laundry.\"},\n        {id: 2, text: \"Learn to make a React app!\"}\n      ],\n      nextId: 3\n    }\n\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  addTodo(todoText) {\n    let todos = this.state.todos.slice();\n    todos.push({id: this.state.nextId, text: todoText});\n    this.setState({\n      todos: todos,\n      nextId: ++this.state.nextId\n    });\n  }\n\n  removeTodo(id){\n    this.setState({\n      todos: this.state.todos.filter((todo, index) => todo.id !== id)\n    });\n  }\n\n\n  handleClick() {\n    this.setState({\n      inputLinked: true\n    })\n  }\n\n  componentDidMount() {\n    var that = this;\n    var date = new Date().getDate(); //Current Date\n    var month = new Date().getMonth(); //Current Month\n    var monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    var realMonth = monthNames[month];\n    var year = new Date().getFullYear(); //Current Year\n    that.setState({\n      //Setting the value of the date time\n      day: date,\n      month: realMonth,\n      year: year\n    });\n  }\n\n  render(){\n  return (\n    <div className=\"app\">\n      <div className=\"main_wrapper\">\n        <div className=\"main_content\">\n          <div className=\"header\">\n          {/* <p><span><b>{this.state.month}</b></span>,&nbsp;{this.state.day}</p>\n          <p>{this.state.year}</p> Z*/}\n          <h3 className=\"heading\">React ToDo List</h3>\n          </div>\n            <div className=\"rows\">\n            <AddButton todoText=\"\" addTodo={this.addTodo}/>\n            </div>\n\n            <ul>\n            {\n              this.state.todos.map((todo) => {\n                return <TodoItems todo={todo} key={todo.id} id={todo.id} removeTodo={this.removeTodo}/>\n              })\n            }\n          </ul>\n          <div className=\"footer\">\n            <p className=\"footerp\">Made By Usama Saleem</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n\n\n// <div className=\"header\">\n//           <p><span><b>{this.state.month}</b></span>,&nbsp;{this.state.day}</p>\n//           <p>{this.state.year}</p>\n//           </div>\n//             <div>\n\n//               {this.state.inputLinked ?\n//                 <input type=\"text\"/>\n\n//                 : <div></div>\n//             }\n            \n//             </div>\n\n\n// this.state = {\n    //   day: '',\n    //   month: '',\n    //   year: ''\n    // }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}